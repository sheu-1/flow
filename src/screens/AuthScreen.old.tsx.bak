/* COMMENTED OUT - OLD AUTH SCREEN
import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, ActivityIndicator, KeyboardAvoidingView, Platform, ScrollView, FlatList, Alert } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useAuth } from '../hooks/useAuth';
import { useTheme } from '../theme/ThemeProvider';

// Complete country data for autocomplete
const COUNTRIES = [
  { name: 'Afghanistan', code: 'AF', callingCode: '93' },
  { name: 'Åland Islands', code: 'AX', callingCode: '358' },
  { name: 'Albania', code: 'AL', callingCode: '355' },
  { name: 'Algeria', code: 'DZ', callingCode: '213' },
  { name: 'American Samoa', code: 'AS', callingCode: '1684' },
  { name: 'Andorra', code: 'AD', callingCode: '376' },
  { name: 'Angola', code: 'AO', callingCode: '244' },
  { name: 'Anguilla', code: 'AI', callingCode: '1264' },
  { name: 'Antarctica', code: 'AQ', callingCode: '672' },
  { name: 'Antigua and Barbuda', code: 'AG', callingCode: '1268' },
  { name: 'Argentina', code: 'AR', callingCode: '54' },
  { name: 'Armenia', code: 'AM', callingCode: '374' },
  { name: 'Aruba', code: 'AW', callingCode: '297' },
  { name: 'Australia', code: 'AU', callingCode: '61' },
  { name: 'Austria', code: 'AT', callingCode: '43' },
  { name: 'Azerbaijan', code: 'AZ', callingCode: '994' },
  { name: 'Bahamas', code: 'BS', callingCode: '1242' },
  { name: 'Bahrain', code: 'BH', callingCode: '973' },
  { name: 'Bangladesh', code: 'BD', callingCode: '880' },
  { name: 'Barbados', code: 'BB', callingCode: '1246' },
  { name: 'Belarus', code: 'BY', callingCode: '375' },
  { name: 'Belgium', code: 'BE', callingCode: '32' },
  { name: 'Belize', code: 'BZ', callingCode: '501' },
  { name: 'Benin', code: 'BJ', callingCode: '229' },
  { name: 'Bermuda', code: 'BM', callingCode: '1441' },
  { name: 'Bhutan', code: 'BT', callingCode: '975' },
  { name: 'Bolivia', code: 'BO', callingCode: '591' },
  { name: 'Bosnia and Herzegovina', code: 'BA', callingCode: '387' },
  { name: 'Botswana', code: 'BW', callingCode: '267' },
  { name: 'Bouvet Island', code: 'BV', callingCode: '47' },
  { name: 'Brazil', code: 'BR', callingCode: '55' },
  { name: 'British Indian Ocean Territory', code: 'IO', callingCode: '246' },
  { name: 'Brunei Darussalam', code: 'BN', callingCode: '673' },
  { name: 'Bulgaria', code: 'BG', callingCode: '359' },
  { name: 'Burkina Faso', code: 'BF', callingCode: '226' },
  { name: 'Burundi', code: 'BI', callingCode: '257' },
  { name: 'Cambodia', code: 'KH', callingCode: '855' },
  { name: 'Cameroon', code: 'CM', callingCode: '237' },
  { name: 'Canada', code: 'CA', callingCode: '1' },
  { name: 'Cape Verde', code: 'CV', callingCode: '238' },
  { name: 'Cayman Islands', code: 'KY', callingCode: '1345' },
  { name: 'Central African Republic', code: 'CF', callingCode: '236' },
  { name: 'Chad', code: 'TD', callingCode: '235' },
  { name: 'Chile', code: 'CL', callingCode: '56' },
  { name: 'China', code: 'CN', callingCode: '86' },
  { name: 'Christmas Island', code: 'CX', callingCode: '61' },
  { name: 'Cocos (Keeling) Islands', code: 'CC', callingCode: '61' },
  { name: 'Colombia', code: 'CO', callingCode: '57' },
  { name: 'Comoros', code: 'KM', callingCode: '269' },
  { name: 'Congo', code: 'CG', callingCode: '242' },
  { name: 'Congo, Democratic Republic', code: 'CD', callingCode: '243' },
  { name: 'Cook Islands', code: 'CK', callingCode: '682' },
  { name: 'Costa Rica', code: 'CR', callingCode: '506' },
  { name: 'Côte d\'Ivoire', code: 'CI', callingCode: '225' },
  { name: 'Croatia', code: 'HR', callingCode: '385' },
  { name: 'Cuba', code: 'CU', callingCode: '53' },
  { name: 'Cyprus', code: 'CY', callingCode: '357' },
  { name: 'Czech Republic', code: 'CZ', callingCode: '420' },
  { name: 'Denmark', code: 'DK', callingCode: '45' },
  { name: 'Djibouti', code: 'DJ', callingCode: '253' },
  { name: 'Dominica', code: 'DM', callingCode: '1767' },
  { name: 'Dominican Republic', code: 'DO', callingCode: '1809' },
  { name: 'Ecuador', code: 'EC', callingCode: '593' },
  { name: 'Egypt', code: 'EG', callingCode: '20' },
  { name: 'El Salvador', code: 'SV', callingCode: '503' },
  { name: 'Equatorial Guinea', code: 'GQ', callingCode: '240' },
  { name: 'Eritrea', code: 'ER', callingCode: '291' },
  { name: 'Estonia', code: 'EE', callingCode: '372' },
  { name: 'Ethiopia', code: 'ET', callingCode: '251' },
  { name: 'Falkland Islands', code: 'FK', callingCode: '500' },
  { name: 'Faroe Islands', code: 'FO', callingCode: '298' },
  { name: 'Fiji', code: 'FJ', callingCode: '679' },
  { name: 'Finland', code: 'FI', callingCode: '358' },
  { name: 'France', code: 'FR', callingCode: '33' },
  { name: 'French Guiana', code: 'GF', callingCode: '594' },
  { name: 'French Polynesia', code: 'PF', callingCode: '689' },
  { name: 'French Southern Territories', code: 'TF', callingCode: '262' },
  { name: 'Gabon', code: 'GA', callingCode: '241' },
  { name: 'Gambia', code: 'GM', callingCode: '220' },
  { name: 'Georgia', code: 'GE', callingCode: '995' },
  { name: 'Germany', code: 'DE', callingCode: '49' },
  { name: 'Ghana', code: 'GH', callingCode: '233' },
  { name: 'Gibraltar', code: 'GI', callingCode: '350' },
  { name: 'Greece', code: 'GR', callingCode: '30' },
  { name: 'Greenland', code: 'GL', callingCode: '299' },
  { name: 'Grenada', code: 'GD', callingCode: '1473' },
  { name: 'Guadeloupe', code: 'GP', callingCode: '590' },
  { name: 'Guam', code: 'GU', callingCode: '1671' },
  { name: 'Guatemala', code: 'GT', callingCode: '502' },
  { name: 'Guernsey', code: 'GG', callingCode: '44' },
  { name: 'Guinea', code: 'GN', callingCode: '224' },
  { name: 'Guinea-Bissau', code: 'GW', callingCode: '245' },
  { name: 'Guyana', code: 'GY', callingCode: '592' },
  { name: 'Haiti', code: 'HT', callingCode: '509' },
  { name: 'Heard Island and McDonald Islands', code: 'HM', callingCode: '672' },
  { name: 'Holy See (Vatican City State)', code: 'VA', callingCode: '379' },
  { name: 'Honduras', code: 'HN', callingCode: '504' },
  { name: 'Hong Kong', code: 'HK', callingCode: '852' },
  { name: 'Hungary', code: 'HU', callingCode: '36' },
  { name: 'Iceland', code: 'IS', callingCode: '354' },
  { name: 'India', code: 'IN', callingCode: '91' },
  { name: 'Indonesia', code: 'ID', callingCode: '62' },
  { name: 'Iran', code: 'IR', callingCode: '98' },
  { name: 'Iraq', code: 'IQ', callingCode: '964' },
  { name: 'Ireland', code: 'IE', callingCode: '353' },
  { name: 'Isle of Man', code: 'IM', callingCode: '44' },
  { name: 'Israel', code: 'IL', callingCode: '972' },
  { name: 'Italy', code: 'IT', callingCode: '39' },
  { name: 'Jamaica', code: 'JM', callingCode: '1876' },
  { name: 'Japan', code: 'JP', callingCode: '81' },
  { name: 'Jersey', code: 'JE', callingCode: '44' },
  { name: 'Jordan', code: 'JO', callingCode: '962' },
  { name: 'Kazakhstan', code: 'KZ', callingCode: '7' },
  { name: 'Kenya', code: 'KE', callingCode: '254' },
  { name: 'Kiribati', code: 'KI', callingCode: '686' },
  { name: 'Korea, Democratic People\'s Republic of', code: 'KP', callingCode: '850' },
  { name: 'Korea, Republic of', code: 'KR', callingCode: '82' },
  { name: 'Kuwait', code: 'KW', callingCode: '965' },
  { name: 'Kyrgyzstan', code: 'KG', callingCode: '996' },
  { name: 'Lao People\'s Democratic Republic', code: 'LA', callingCode: '856' },
  { name: 'Latvia', code: 'LV', callingCode: '371' },
  { name: 'Lebanon', code: 'LB', callingCode: '961' },
  { name: 'Lesotho', code: 'LS', callingCode: '266' },
  { name: 'Liberia', code: 'LR', callingCode: '231' },
  { name: 'Libya', code: 'LY', callingCode: '218' },
  { name: 'Liechtenstein', code: 'LI', callingCode: '423' },
  { name: 'Lithuania', code: 'LT', callingCode: '370' },
  { name: 'Luxembourg', code: 'LU', callingCode: '352' },
  { name: 'Macao', code: 'MO', callingCode: '853' },
  { name: 'Macedonia', code: 'MK', callingCode: '389' },
  { name: 'Madagascar', code: 'MG', callingCode: '261' },
  { name: 'Malawi', code: 'MW', callingCode: '265' },
  { name: 'Malaysia', code: 'MY', callingCode: '60' },
  { name: 'Maldives', code: 'MV', callingCode: '960' },
  { name: 'Mali', code: 'ML', callingCode: '223' },
  { name: 'Malta', code: 'MT', callingCode: '356' },
  { name: 'Marshall Islands', code: 'MH', callingCode: '692' },
  { name: 'Martinique', code: 'MQ', callingCode: '596' },
  { name: 'Mauritania', code: 'MR', callingCode: '222' },
  { name: 'Mauritius', code: 'MU', callingCode: '230' },
  { name: 'Mayotte', code: 'YT', callingCode: '262' },
  { name: 'Mexico', code: 'MX', callingCode: '52' },
  { name: 'Micronesia', code: 'FM', callingCode: '691' },
  { name: 'Moldova', code: 'MD', callingCode: '373' },
  { name: 'Monaco', code: 'MC', callingCode: '377' },
  { name: 'Mongolia', code: 'MN', callingCode: '976' },
  { name: 'Montenegro', code: 'ME', callingCode: '382' },
  { name: 'Montserrat', code: 'MS', callingCode: '1664' },
  { name: 'Morocco', code: 'MA', callingCode: '212' },
  { name: 'Mozambique', code: 'MZ', callingCode: '258' },
  { name: 'Myanmar', code: 'MM', callingCode: '95' },
  { name: 'Namibia', code: 'NA', callingCode: '264' },
  { name: 'Nauru', code: 'NR', callingCode: '674' },
  { name: 'Nepal', code: 'NP', callingCode: '977' },
  { name: 'Netherlands', code: 'NL', callingCode: '31' },
  { name: 'Netherlands Antilles', code: 'AN', callingCode: '599' },
  { name: 'New Caledonia', code: 'NC', callingCode: '687' },
  { name: 'New Zealand', code: 'NZ', callingCode: '64' },
  { name: 'Nicaragua', code: 'NI', callingCode: '505' },
  { name: 'Niger', code: 'NE', callingCode: '227' },
  { name: 'Nigeria', code: 'NG', callingCode: '234' },
  { name: 'Niue', code: 'NU', callingCode: '683' },
  { name: 'Norfolk Island', code: 'NF', callingCode: '672' },
  { name: 'Northern Mariana Islands', code: 'MP', callingCode: '1670' },
  { name: 'Norway', code: 'NO', callingCode: '47' },
  { name: 'Oman', code: 'OM', callingCode: '968' },
  { name: 'Pakistan', code: 'PK', callingCode: '92' },
  { name: 'Palau', code: 'PW', callingCode: '680' },
  { name: 'Palestinian Territory', code: 'PS', callingCode: '970' },
  { name: 'Panama', code: 'PA', callingCode: '507' },
  { name: 'Papua New Guinea', code: 'PG', callingCode: '675' },
  { name: 'Paraguay', code: 'PY', callingCode: '595' },
  { name: 'Peru', code: 'PE', callingCode: '51' },
  { name: 'Philippines', code: 'PH', callingCode: '63' },
  { name: 'Pitcairn', code: 'PN', callingCode: '64' },
  { name: 'Poland', code: 'PL', callingCode: '48' },
  { name: 'Portugal', code: 'PT', callingCode: '351' },
  { name: 'Puerto Rico', code: 'PR', callingCode: '1787' },
  { name: 'Qatar', code: 'QA', callingCode: '974' },
  { name: 'Réunion', code: 'RE', callingCode: '262' },
  { name: 'Romania', code: 'RO', callingCode: '40' },
  { name: 'Russian Federation', code: 'RU', callingCode: '7' },
  { name: 'Rwanda', code: 'RW', callingCode: '250' },
  { name: 'Saint Barthélemy', code: 'BL', callingCode: '590' },
  { name: 'Saint Helena', code: 'SH', callingCode: '290' },
  { name: 'Saint Kitts and Nevis', code: 'KN', callingCode: '1869' },
  { name: 'Saint Lucia', code: 'LC', callingCode: '1758' },
  { name: 'Saint Martin', code: 'MF', callingCode: '590' },
  { name: 'Saint Pierre and Miquelon', code: 'PM', callingCode: '508' },
  { name: 'Saint Vincent and the Grenadines', code: 'VC', callingCode: '1784' },
  { name: 'Samoa', code: 'WS', callingCode: '685' },
  { name: 'San Marino', code: 'SM', callingCode: '378' },
  { name: 'Sao Tome and Principe', code: 'ST', callingCode: '239' },
  { name: 'Saudi Arabia', code: 'SA', callingCode: '966' },
  { name: 'Senegal', code: 'SN', callingCode: '221' },
  { name: 'Serbia', code: 'RS', callingCode: '381' },
  { name: 'Seychelles', code: 'SC', callingCode: '248' },
  { name: 'Sierra Leone', code: 'SL', callingCode: '232' },
  { name: 'Singapore', code: 'SG', callingCode: '65' },
  { name: 'Slovakia', code: 'SK', callingCode: '421' },
  { name: 'Slovenia', code: 'SI', callingCode: '386' },
  { name: 'Solomon Islands', code: 'SB', callingCode: '677' },
  { name: 'Somalia', code: 'SO', callingCode: '252' },
  { name: 'South Africa', code: 'ZA', callingCode: '27' },
  { name: 'South Georgia and the South Sandwich Islands', code: 'GS', callingCode: '500' },
  { name: 'Spain', code: 'ES', callingCode: '34' },
  { name: 'Sri Lanka', code: 'LK', callingCode: '94' },
  { name: 'Sudan', code: 'SD', callingCode: '249' },
  { name: 'Suriname', code: 'SR', callingCode: '597' },
  { name: 'Svalbard and Jan Mayen', code: 'SJ', callingCode: '47' },
  { name: 'Swaziland', code: 'SZ', callingCode: '268' },
  { name: 'Sweden', code: 'SE', callingCode: '46' },
  { name: 'Switzerland', code: 'CH', callingCode: '41' },
  { name: 'Syrian Arab Republic', code: 'SY', callingCode: '963' },
  { name: 'Taiwan', code: 'TW', callingCode: '886' },
  { name: 'Tajikistan', code: 'TJ', callingCode: '992' },
  { name: 'Tanzania', code: 'TZ', callingCode: '255' },
  { name: 'Thailand', code: 'TH', callingCode: '66' },
  { name: 'Timor-Leste', code: 'TL', callingCode: '670' },
  { name: 'Togo', code: 'TG', callingCode: '228' },
  { name: 'Tokelau', code: 'TK', callingCode: '690' },
  { name: 'Tonga', code: 'TO', callingCode: '676' },
  { name: 'Trinidad and Tobago', code: 'TT', callingCode: '1868' },
  { name: 'Tunisia', code: 'TN', callingCode: '216' },
  { name: 'Turkey', code: 'TR', callingCode: '90' },
  { name: 'Turkmenistan', code: 'TM', callingCode: '993' },
  { name: 'Turks and Caicos Islands', code: 'TC', callingCode: '1649' },
  { name: 'Tuvalu', code: 'TV', callingCode: '688' },
  { name: 'Uganda', code: 'UG', callingCode: '256' },
  { name: 'Ukraine', code: 'UA', callingCode: '380' },
  { name: 'United Arab Emirates', code: 'AE', callingCode: '971' },
  { name: 'United Kingdom', code: 'GB', callingCode: '44' },
  { name: 'United States', code: 'US', callingCode: '1' },
  { name: 'United States Minor Outlying Islands', code: 'UM', callingCode: '1' },
  { name: 'Uruguay', code: 'UY', callingCode: '598' },
  { name: 'Uzbekistan', code: 'UZ', callingCode: '998' },
  { name: 'Vanuatu', code: 'VU', callingCode: '678' },
  { name: 'Venezuela', code: 'VE', callingCode: '58' },
  { name: 'Viet Nam', code: 'VN', callingCode: '84' },
  { name: 'Virgin Islands, British', code: 'VG', callingCode: '1284' },
  { name: 'Virgin Islands, U.S.', code: 'VI', callingCode: '1340' },
  { name: 'Wallis and Futuna', code: 'WF', callingCode: '681' },
  { name: 'Western Sahara', code: 'EH', callingCode: '212' },
  { name: 'Yemen', code: 'YE', callingCode: '967' },
  { name: 'Zambia', code: 'ZM', callingCode: '260' },
  { name: 'Zimbabwe', code: 'ZW', callingCode: '263' },
];

type Country = {
  name: string;
  code: string;
  callingCode: string;
};

const AuthScreen: React.FC = () => {
  const { signIn, signUp, signInWithGoogle, loading } = useAuth();
  const { colors } = useTheme();
  const [mode, setMode] = useState<'login' | 'signup'>('login');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [username, setUsername] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [emailError, setEmailError] = useState<string | null>(null);
  const [passwordError, setPasswordError] = useState<string | null>(null);
  const [usernameError, setUsernameError] = useState<string | null>(null);
  const [showPassword, setShowPassword] = useState(false);
  const [signupSuccess, setSignupSuccess] = useState(false);
  const [loginSuccess, setLoginSuccess] = useState(false);

  useEffect(() => {
    let timer: NodeJS.Timeout | undefined;
    if (signupSuccess) {
      // Auto-redirect to login after a short delay
      timer = setTimeout(() => {
        setSignupSuccess(false);
        setMode('login');
      }, 2000);
    }
    return () => {
      if (timer) clearTimeout(timer);
    };
  }, [signupSuccess]);

  useEffect(() => {
    let timer: NodeJS.Timeout | undefined;
    if (loginSuccess) {
      // Show success message briefly before auth state changes
      timer = setTimeout(() => {
        setLoginSuccess(false);
      }, 1500);
    }
    return () => {
      if (timer) clearTimeout(timer);
    };
  }, [loginSuccess]);

  const validateEmail = (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const validatePassword = (password: string): string | null => {
    if (password.length < 6) {
      return 'Password must be at least 6 characters long';
    }
    return null;
  };

  const validateUsername = (username: string): string | null => {
    if (mode === 'signup' && username.trim().length < 2) {
      return 'Username must be at least 2 characters long';
    }
    if (mode === 'signup' && !/^[a-zA-Z0-9_\s]+$/.test(username.trim())) {
      return 'Username can only contain letters, numbers, underscores, and spaces';
    }
    return null;
  };

  const onSubmit = async () => {
    setError(null);
    setEmailError(null);
    setPasswordError(null);
    setUsernameError(null);
    
    // Client-side validation
    if (!validateEmail(email)) {
      setEmailError('Please enter a valid email address');
      return;
    }
    
    const passwordValidation = validatePassword(password);
    if (passwordValidation) {
      setPasswordError(passwordValidation);
      return;
    }
    
    if (mode === 'signup') {
      const usernameValidation = validateUsername(username);
      if (usernameValidation) {
        setUsernameError(usernameValidation);
        return;
      }
    }
    
    try {
      if (mode === 'login') {
        await signIn(email.trim(), password);
        setLoginSuccess(true);
      } else {
        await signUp(email.trim(), password, username.trim());
        // Show success screen and clear fields
        setSignupSuccess(true);
        setEmail('');
        setPassword('');
        setUsername('');
        setShowPassword(false);
      }
    } catch (e: any) {
      const message = e?.message || 'Something went wrong. Please try again.';
      
      // Show field-specific errors for common auth issues
      if (message.includes('Incorrect email or password') || 
          message.includes('Invalid login credentials') ||
          message.includes('Email not confirmed')) {
        setError('Incorrect email or password');
      } 
      // Handle email-related errors
      else if (message.includes('A user with this email already exists') || 
               message.includes('already registered') || 
               message.includes('already in use') ||
               message.includes('User already registered')) {
        setEmailError('A user with this email already exists');
      }
      // Handle password-related errors
      else if (message.includes('Password must be at least') || 
               message.includes('Password should be at least') || 
               message.includes('Password is too weak') ||
               message.includes('Password')) {
        setPasswordError('Password must be at least 6 characters long');
      }
      // Handle email format errors
      else if (message.includes('Invalid email') || 
               message.includes('not a valid email') ||
               message.includes('email') || 
               message.includes('Email')) {
        setEmailError('Please enter a valid email address');
      }
      // Handle disabled signups
      else if (message.includes('signups are disabled') || 
               message.includes('Email signups are disabled')) {
        setError('Account creation is currently disabled. Please contact support.');
      }
      // Fallback for any other errors
      else {
        setError('Unable to complete request. Please check your details and try again.');
      }
    }
  };

  const handleGoogleSignIn = async () => {
    setError(null);
    setEmailError(null);
    setPasswordError(null);
    setUsernameError(null);
    
    try {
      const googleResult = await signInWithGoogle();
      console.log('Google sign-in successful:', {
        email: googleResult.user.email,
        name: googleResult.user.name,
      });
    } catch (e: any) {
      const message = e?.message || 'Google sign in failed';
      
      if (message.includes('cancelled') || message.includes('canceled')) {
        // User cancelled the OAuth flow - don't show error
        return;
      } else if (message.includes('network') || message.includes('connection')) {
        setError('Network error. Please check your connection and try again.');
      } else if (message.includes('redirect') || message.includes('deep')) {
        setError('Configuration error. Please contact support.');
      } else if (message.includes('OAuth flow was')) {
        setError('Sign-in was cancelled or failed. Please try again.');
      } else if (message.includes('Failed to obtain access token')) {
        setError('Authentication failed. Please try again.');
      } else {
        setError('Google sign in failed. Please try again.');
      }
    }
  };


  const isValid = email.includes('@') && password.length >= 6 && (mode === 'login' || username.trim().length >= 2);

  if (signupSuccess) {
    return (
      <KeyboardAvoidingView
        style={[styles.container, { backgroundColor: colors.background }]}
        behavior={Platform.OS === 'ios' ? 'padding' : undefined}
      >
        <View style={[styles.successWrap, { padding: 24 }]}> 
          <Ionicons name="checkmark-circle" size={64} color={colors.primary} style={{ marginBottom: 16 }} />
          <Text style={[styles.successTitle, { color: colors.text }]}>Account created!</Text>
          <Text style={[styles.successSubtitle, { color: colors.textSecondary }]}>You can now proceed to login.</Text>

          <TouchableOpacity
            onPress={() => { setSignupSuccess(false); setMode('login'); }}
            style={[styles.button, { backgroundColor: colors.primary, marginTop: 24 }]}
          >
            <Text style={styles.buttonText}>Go to Login</Text>
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    );
  }

  if (loginSuccess) {
    return (
      <KeyboardAvoidingView
        style={[styles.container, { backgroundColor: colors.background }]}
        behavior={Platform.OS === 'ios' ? 'padding' : undefined}
      >
        <View style={[styles.successWrap, { padding: 24 }]}> 
          <Ionicons name="checkmark-circle" size={64} color={colors.success || colors.primary} style={{ marginBottom: 16 }} />
          <Text style={[styles.successTitle, { color: colors.text }]}>Login successful!</Text>
          <Text style={[styles.successSubtitle, { color: colors.textSecondary }]}>Redirecting to dashboard...</Text>
        </View>
      </KeyboardAvoidingView>
    );
  }

  return (
    <KeyboardAvoidingView
      style={[styles.container, { backgroundColor: colors.background }]}
      behavior={Platform.OS === 'ios' ? 'padding' : undefined}
    >
      <ScrollView contentContainerStyle={styles.scroll} keyboardShouldPersistTaps="handled">
        <View style={[styles.card, { backgroundColor: colors.surface, borderColor: colors.border }]}>
          <Text style={[styles.title, { color: colors.text }]}>{mode === 'login' ? 'Welcome back' : 'Create account'}</Text>
          <Text style={[styles.subtitle, { color: colors.textSecondary }]}>
            {mode === 'login' ? 'Sign in to continue' : 'Sign up to get started'}
          </Text>

          {mode === 'signup' && (
            <View style={styles.field}>
              <Text style={[styles.label, { color: colors.textSecondary }]}>Username</Text>
              <TextInput
                value={username}
                onChangeText={setUsername}
                autoCapitalize="words"
                autoCorrect={false}
                placeholder="Your display name"
                placeholderTextColor={colors.textMuted}
                style={[styles.input, { color: colors.text, borderColor: colors.border, backgroundColor: colors.card }]}
              />
              {usernameError ? (
                <Text style={[styles.fieldError, { color: colors.danger }]}>{usernameError}</Text>
              ) : null}
            </View>
          )}

          <View style={styles.field}>
            <Text style={[styles.label, { color: colors.textSecondary }]}>Email</Text>
            <TextInput
              value={email}
              onChangeText={setEmail}
              keyboardType="email-address"
              autoCapitalize="none"
              autoCorrect={false}
              placeholder="you@example.com"
              placeholderTextColor={colors.textMuted}
              style={[styles.input, { color: colors.text, borderColor: colors.border, backgroundColor: colors.card }]}
            />
            {emailError ? (
              <Text style={[styles.fieldError, { color: colors.danger }]}>{emailError}</Text>
            ) : null}
          </View>

          <View style={styles.field}>
            <Text style={[styles.label, { color: colors.textSecondary }]}>Password</Text>
            <View style={styles.inputWrapper}>
              <TextInput
                value={password}
                onChangeText={setPassword}
                secureTextEntry={!showPassword}
                autoCapitalize="none"
                autoCorrect={false}
                placeholder="••••••••"
                placeholderTextColor={colors.textMuted}
                style={[
                  styles.input,
                  { color: colors.text, borderColor: colors.border, backgroundColor: colors.card, paddingRight: 44 },
                ]}
              />
              <TouchableOpacity
                accessibilityRole="button"
                accessibilityLabel={showPassword ? 'Hide password' : 'Show password'}
                onPress={() => setShowPassword((v) => !v)}
                style={styles.eyeButton}
              >
                <Ionicons name={showPassword ? 'eye-off' : 'eye'} size={22} color={colors.textSecondary} />
              </TouchableOpacity>
            </View>
            {passwordError ? (
              <Text style={[styles.fieldError, { color: colors.danger }]}>{passwordError}</Text>
            ) : null}
          </View>

          {/* Error message display */}
          {error ? (
            <View style={[
              styles.errorContainer, 
              { 
                backgroundColor: colors.danger + '20',
                borderLeftWidth: 4,
                borderLeftColor: colors.danger,
                marginBottom: 16,
                padding: 12,
                borderRadius: 4
              }
            ]}>
              <Ionicons 
                name="alert-circle" 
                size={18} 
                color={colors.danger} 
                style={{ marginRight: 8 }}
              />
              <Text style={[styles.errorText, { color: colors.danger, flex: 1 }]}>
                {error}
              </Text>
            </View>
          ) : null}

          <TouchableOpacity
            disabled={!isValid || loading}
            onPress={onSubmit}
            style={[
              styles.button,
              { backgroundColor: (!isValid || loading) ? colors.inactive : colors.primary },
            ]}
          >
            {loading ? (
              <ActivityIndicator color="#fff" />
            ) : (
              <Text style={styles.buttonText}>{mode === 'login' ? 'Sign In' : 'Create Account'}</Text>
            )}
          </TouchableOpacity>

          {/* OAuth deep linking temporarily disabled
          <View style={styles.divider}>
            <View style={[styles.dividerLine, { backgroundColor: colors.border }]} />
            <Text style={[styles.dividerText, { color: colors.textSecondary }]}>or</Text>
            <View style={[styles.dividerLine, { backgroundColor: colors.border }]} />
          </View>

          <TouchableOpacity
            disabled={loading}
            onPress={handleGoogleSignIn}
            style={[styles.googleButton, { backgroundColor: colors.card, borderColor: colors.border }]}
          >
            <View style={styles.googleButtonContent}>
              <Text style={styles.googleIcon}>G</Text>
              <Text style={[styles.googleButtonText, { color: colors.text }]}>
                Continue with Google
              </Text>
            </View>
          </TouchableOpacity>
          */}

          <TouchableOpacity onPress={() => setMode(mode === 'login' ? 'signup' : 'login')}>
            <Text style={[styles.switchText, { color: colors.primary }]}>
              {mode === 'login' ? "Don't have an account? Sign up" : 'Already have an account? Sign in'}
            </Text>
          </TouchableOpacity>
        </View>

        <Text style={[styles.helper, { color: colors.textMuted }]}>
          By continuing, you agree to our Terms and acknowledge our Privacy Policy.
        </Text>
      </ScrollView>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scroll: {
    flexGrow: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 24,
  },
  card: {
    width: '100%',
    maxWidth: 480,
    borderRadius: 12,
    padding: 20,
    borderWidth: 1,
  },
  title: {
    fontSize: 22,
    fontWeight: '700',
  },
  subtitle: {
    fontSize: 14,
    marginTop: 6,
    marginBottom: 16,
  },
  field: {
    marginBottom: 14,
  },
  label: {
    fontSize: 13,
    marginBottom: 6,
  },
  input: {
    height: 48,
    borderRadius: 8,
    borderWidth: 1,
    paddingHorizontal: 12,
    fontSize: 16,
  },
  inputWrapper: {
    position: 'relative',
  },
  eyeButton: {
    position: 'absolute',
    right: 10,
    top: 12,
    width: 24,
    height: 24,
    alignItems: 'center',
    justifyContent: 'center',
  },
  errorContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    borderRadius: 8,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: 'transparent',
  },
  errorText: {
    fontSize: 14,
    marginLeft: 4,
  },
  fieldError: {
    fontSize: 12,
    marginTop: 4,
  },
  button: {
    height: 48,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 8,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '700',
  },
  switchText: {
    textAlign: 'center',
    marginTop: 14,
    fontWeight: '600',
  },
  helper: {
    textAlign: 'center',
    marginTop: 16,
    fontSize: 12,
  },
  divider: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 20,
  },
  dividerLine: {
    flex: 1,
    height: 1,
  },
  dividerText: {
    marginHorizontal: 16,
    fontSize: 14,
  },
  googleButton: {
    height: 48,
    borderRadius: 8,
    borderWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 16,
  },
  googleButtonContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  googleIcon: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#4285F4',
    marginRight: 12,
  },
  googleButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },
  successWrap: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  successTitle: {
    fontSize: 22,
    fontWeight: '700',
    marginBottom: 6,
  },
  successSubtitle: {
    fontSize: 14,
  },
  autocompleteContainer: {
    position: 'relative',
    zIndex: 1000,
  },
  suggestionsContainer: {
    position: 'absolute',
    top: '100%',
    left: 0,
    right: 0,
    borderWidth: 1,
    borderTopWidth: 0,
    borderBottomLeftRadius: 8,
    borderBottomRightRadius: 8,
    maxHeight: 200,
    zIndex: 1001,
  },
  suggestionsList: {
    maxHeight: 200,
  },
  suggestionItem: {
    paddingHorizontal: 12,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(255,255,255,0.1)',
  },
  suggestionText: {
    fontSize: 14,
  },
  hintText: {
    fontSize: 12,
    marginTop: 4,
    fontStyle: 'italic',
  },
});

// OLD export commented out
// export default AuthScreen;
*/

// NEW AUTH SCREEN - Import from new file
export { default } from './AuthScreen.new';
